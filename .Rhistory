hist(data[,2])
data = read.csv("Student_Performance.csv")
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
boxplot(data$Performance.Index ~ data$Extracurricular.Activities)
boxplot(data$Performance.Index ~ data$Extracurricular.Activities)
data = read.csv("Student_Performance.csv")
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
cov(data)
data = read.csv("Student_Performance.csv")
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
for i in (1:nrow(data)){
data = read.csv("Student_Performance.csv")
data$Extracurricular.Activities <- ifelse(data$Extracurricular.Activities== "yes", 1, 0)
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
boxplot(data$Performance.Index ~ data$Extracurricular.Activities)
View(data)
cov(data)
mean(data$Extracurricular.Activities)
data = read.csv("Student_Performance.csv")
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
data = read.csv("Student_Performance.csv")
data$variabile_dummy <- as.numeric(factor(data$variabile_categorica, levels = c("no", "yes")) - 1)
data = read.csv("Student_Performance.csv")
data = read.csv("Student_Performance.csv")
data$variabile_dummy <- as.numeric(factor(data$variabile_categorica, levels = c("no", "yes")))
data = read.csv("Student_Performance.csv")
data$Extracurricular.Activities = ifelse(data$Extracurricular.Activities == "Yes", 1, 0)
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
boxplot(data$Performance.Index ~ data$Extracurricular.Activities)
cov(data)
corrplot(data)
library(corrplot)
corrplot(data)
corrplot(cov(data))
library(corrplot)
library(ggplot2)
library(GGally)
library(leaps)
library(ISLR)
library(readxl)
library(combinat)
library(mvtnorm)
library(coda)
library(corrplot)
library(dplyr)
library(tidyr)
library(rjags)
library(rstan)
library(R2jags)
library(bbricks)
library(LaplacesDemon)
selected_variables <- colnames(data)
selected_data <- data[, selected_variables]
correlation_matrix <- cor(selected_data)
corrplot(correlation_matrix[, 1:6], tl.col = 'darkblue')
model = lm(data$Performance.Index~.)
model = lm(data$Performance.Index~., data = data)
model = lm(data$Performance.Index~., data = data)
summary(model)
library(corrplot)
library(ggplot2)
library(GGally)
library(leaps)
library(ISLR)
library(readxl)
library(combinat)
library(mvtnorm)
library(coda)
library(corrplot)
library(dplyr)
library(tidyr)
library(rjags)
library(rstan)
library(R2jags)
library(bbricks)
library(LaplacesDemon)
data = read.csv("Student_Performance.csv")
data$Extracurricular.Activities = ifelse(data$Extracurricular.Activities == "Yes", 1, 0)
str(data)
par(mfrow = c(2,3))
hist(data[,1])
hist(data[,2])
hist(data[,4])
hist(data[,5])
hist(data[,6])
boxplot(data$Performance.Index ~ data$Extracurricular.Activities)
selected_variables <- colnames(data)
selected_data <- data[, selected_variables]
correlation_matrix <- cor(selected_data)
corrplot(correlation_matrix[, 1:6], tl.col = 'darkblue')
model = lm(data$Performance.Index~., data = data)
summary(model)
posterior_linear_conjugate = function(y, X, beta.0, V, a, b, S){
library(mvtnorm)
n = nrow(X)
p = ncol(X)
V.n    = V + t(X)%*%X
beta.n = solve(V + t(X)%*%X)%*%(V%*%beta.0 + t(X)%*%y)
a.n = a + n
b.n = b + t(y)%*%y + beta.0%*%V%*%beta.0 - t(beta.n)%*%(V + t(X)%*%X)%*%beta.n
beta_post   = matrix(NA, S, p)
sigma2_post = matrix(NA, S, 1)
for(s in 1:S){
tau  = rgamma(1, a.n/2, b.n/2)
sigma2 = 1/tau
beta = c(rmvnorm(1, beta.n, solve(V.n)/tau))
beta_post[s,]   = beta
sigma2_post[s,] = sigma2
}
return(posterior = list(beta_post   = beta_post,
sigma2_post = sigma2_post))
}
marg_like_regr = function(y, X, beta.0, V, a, b){
X = as.matrix(X)
V = as.matrix(V)
n = nrow(X)
p = ncol(X)
V.n    = V + t(X)%*%X
beta.n = solve(V + t(X)%*%X)%*%(V%*%beta.0 + t(X)%*%y)
a.n = a + n
b.n = b + t(y)%*%y + beta.0%*%V%*%beta.0 - t(beta.n)%*%(V + t(X)%*%X)%*%beta.n
m = -n/2*log(2*pi) + a/2*log(b/2) - a.n/2*log(b.n/2) +
lgamma(a.n/2) - lgamma(a/2) +
log(det(V))/2 - log(det(V.n))/2
return(m)
}
X = model.matrix(y ~., data_X)
X = model.matrix(y ~., data)
y = data$Performance.Index
X = model.matrix(y ~., data)
p = ncol(X)
head(X)
beta.0 = rep(0, p)
V      = diag(0.01, p)
a      = 0.01
b      = 0.01
S = 5000
out = posterior_linear_conjugate(y, X, beta.0, V, a, b, S = S)
str(out)
beta_post = out$beta_post
sigma2_post = out$sigma2_post
beta_post_mcmc = as.mcmc(beta_post)
sigma2_post_mcmc = as.mcmc(sigma2_post)
par(mar = c(3,5,1,1))
boxplot(out$beta_post, outline = F, ylim = c(-550,550), ylab = expression(beta), las = 1)
abline(h = 0, col = "blue", lty = "dashed")
out_lm = summary(lm(y ~ X - 1))
points(out_lm$coefficients[,1], col = "blue", pch = 16)
par(mar = c(3,5,1,1))
boxplot(out$beta_post, outline = F, ylim = c(-80,80), ylab = expression(beta), las = 1)
abline(h = 0, col = "blue", lty = "dashed")
out_lm = summary(lm(y ~ X - 1))
points(out_lm$coefficients[,1], col = "blue", pch = 16)
post.means = apply(beta_post_mcmc[,1:9],2, mean)
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:9]), cols = 1:9) %>%
arrange(name) %>%
mutate(density = "posterior")
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(9 * 1000, 0, 100),
density = rep("prior", 9 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-50,50)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
library(ggplot2)
library(dplyr)
library(tidyr)
# Esempio di codice per creare dati di prior e posterior (già hai)
post.means <- apply(beta_post_mcmc[,1:6], 2, mean)
CI <- apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws <- pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
prior_draws <- data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
draws <- rbind(posterior_draws, prior_draws)
library(ggplot2)
library(dplyr)
library(tidyr)
# Esempio di codice per creare dati di prior e posterior (già hai)
post.means <- apply(beta_post_mcmc[,1:6], 2, mean)
CI <- apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws <- pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
prior_draws <- data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
draws <- rbind(posterior_draws, prior_draws)
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(9 * 1000, 0, 100),
density = rep("prior", 9 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-50,50)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) +
xlim(c(-50,50)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density")
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(9 * 1000, 0, 100),
density = rep("prior", 9 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-50,50)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(9 * 1000, 0, 100),
density = rep("prior", 9 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-1000,1000)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"), each = 1000),
value = rnorm(9 * 1000, 0, 100),
density = rep("prior", 9 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-50,50)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(9 * 1000, 0, 100),
density = rep("prior", 9 * 1000))
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-5,5)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-1,1)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-0.01,0.01)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
post.means = apply(beta_post_mcmc[,1:6],2, mean)
CI = apply(beta_post_mcmc[,1:6], 2, function(x) quantile(x, c(0.025, 0.975)))
posterior_draws = pivot_longer(as.data.frame(beta_post_mcmc[,1:6]), cols = 1:6) %>%
arrange(name) %>%
mutate(density = "posterior")
head(posterior_draws)
colnames(posterior_draws) = c("parameter", "value", "density")
prior_draws = data.frame(parameter = rep(c("V1", "V2", "V3", "V4", "V5", "V6"), each = 1000),
value = rnorm(6 * 1000, 0, 100),
density = rep("prior", 6 * 1000))
draws = rbind(posterior_draws, prior_draws)
# Plot the densities
p1 = ggplot(draws, aes(x = value, colour = density, fill = density)) +
geom_density(alpha = 0.2) + xlim(c(-5,5)) +
theme(aspect.ratio = 1) +
theme_bw() +
scale_fill_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
scale_color_manual(values = c("prior" = "darkgreen", "posterior" = "red")) +
facet_wrap(~parameter, scales = "free") +
labs(title = "Prior and Posterior Densities of Coefficients",
x = "Value", y = "Density"); p1
beta_post_mcmc
beta_post_mcmc   = as.mcmc(out$beta_post)
sigma2_post_mcmc = as.mcmc(out$sigma2_post)
# Traccia i plot
traceplot(beta_post_mcmc)
traceplot(sigma2_post_mcmc)
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:6, "]"), each = 5000), Z_Score = as.vector(z_scores_beta))
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:9, "]"), each = 5000), Z_Score = as.vector(z_scores_beta))
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:6, "]"), each = 1000), Z_Score = as.vector(z_scores_beta))
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:6, "]"), each = 1000), Z_Score = as.vector(z_scores_beta))
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:6, "]"), each = 100), Z_Score = as.vector(z_scores_beta))
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:6, "]"), each = 1000), Z_Score = as.vector(z_scores_beta))
# Calcolare il test di Geweke per ciascun parametro
geweke_beta <- geweke.diag(beta_post_mcmc)
geweke_sigma2 <- geweke.diag(sigma2_post_mcmc)
# Estrai i valori z
z_scores_beta <- geweke_beta$z
z_scores_sigma2 <- geweke_sigma2$z
# Convertire i risultati in data frame per ggplot2
df_beta <- data.frame(Parameter = rep(paste0("Beta[", 1:6, "]"), each = 5000), Z_Score = as.vector(z_scores_beta))
